services:
  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ORDER_SERVICE_URL=http://order-service:8080
      - PAYMENTS_SERVICE_URL=http://payments-service:8080
      - DOTNET_RUNNING_IN_CONTAINER=true
    depends_on:
      order-service:
        condition: service_started
      payments-service:
        condition: service_started
    networks:
      - shop-network
    restart: unless-stopped

  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=order-db;Database=orders;Username=postgres;Password=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_ORDER_TASKS_TOPIC=order-payment-tasks
      - KAFKA_PAYMENT_RESULTS_TOPIC=payment-results
      - DOTNET_RUNNING_IN_CONTAINER=true
    depends_on:
      order-db:
        condition: service_started
      kafka:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
    networks:
      - shop-network
    restart: unless-stopped

  payments-service:
    build:
      context: ./PaymentsService
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=payments-db;Database=payments;Username=postgres;Password=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_ORDER_TASKS_TOPIC=order-payment-tasks
      - KAFKA_PAYMENT_RESULTS_TOPIC=payment-results
      - DOTNET_RUNNING_IN_CONTAINER=true
    depends_on:
      payments-db:
        condition: service_started
      kafka:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
    networks:
      - shop-network
    restart: unless-stopped

  order-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=orders
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - shop-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  payments-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=payments
    volumes:
      - payments-db-data:/var/lib/postgresql/data
    networks:
      - shop-network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - shop-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - shop-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      echo 'Waiting for Kafka to be ready...'
      sleep 10
      kafka-topics --bootstrap-server kafka:9092 --list

      echo 'Creating topics...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic order-payment-tasks --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic payment-results --replication-factor 1 --partitions 3
      
      echo 'Topics created successfully!'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    networks:
      - shop-network

networks:
  shop-network:
    driver: bridge

volumes:
  order-db-data:
  payments-db-data: